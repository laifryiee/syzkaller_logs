// autogenerated by syzkaller (https://github.com/google/syzkaller)

#define _GNU_SOURCE

#include <dirent.h>
#include <endian.h>
#include <errno.h>
#include <fcntl.h>
#include <sched.h>
#include <setjmp.h>
#include <signal.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/mount.h>
#include <sys/prctl.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <time.h>
#include <unistd.h>

#include <linux/loop.h>

#ifndef __NR_memfd_create
#define __NR_memfd_create 319
#endif

static unsigned long long procid;

static void sleep_ms(uint64_t ms)
{
  usleep(ms * 1000);
}

static uint64_t current_time_ms(void)
{
  struct timespec ts;
  if (clock_gettime(CLOCK_MONOTONIC, &ts))
    exit(1);
  return (uint64_t)ts.tv_sec * 1000 + (uint64_t)ts.tv_nsec / 1000000;
}

static void use_temporary_dir(void)
{
  char tmpdir_template[] = "./syzkaller.XXXXXX";
  char* tmpdir = mkdtemp(tmpdir_template);
  if (!tmpdir)
    exit(1);
  if (chmod(tmpdir, 0777))
    exit(1);
  if (chdir(tmpdir))
    exit(1);
}

static bool write_file(const char* file, const char* what, ...)
{
  char buf[1024];
  va_list args;
  va_start(args, what);
  vsnprintf(buf, sizeof(buf), what, args);
  va_end(args);
  buf[sizeof(buf) - 1] = 0;
  int len = strlen(buf);
  int fd = open(file, O_WRONLY | O_CLOEXEC);
  if (fd == -1)
    return false;
  if (write(fd, buf, len) != len) {
    int err = errno;
    close(fd);
    errno = err;
    return false;
  }
  close(fd);
  return true;
}

static long syz_open_dev(volatile long a0, volatile long a1, volatile long a2)
{
  if (a0 == 0xc || a0 == 0xb) {
    char buf[128];
    sprintf(buf, "/dev/%s/%d:%d", a0 == 0xc ? "char" : "block", (uint8_t)a1,
            (uint8_t)a2);
    return open(buf, O_RDWR, 0);
  } else {
    char buf[1024];
    char* hash;
    strncpy(buf, (char*)a0, sizeof(buf) - 1);
    buf[sizeof(buf) - 1] = 0;
    while ((hash = strchr(buf, '#'))) {
      *hash = '0' + (char)(a1 % 10);
      a1 /= 10;
    }
    return open(buf, a2, 0);
  }
}

//% This code is derived from puff.{c,h}, found in the zlib development. The
//% original files come with the following copyright notice:

//% Copyright (C) 2002-2013 Mark Adler, all rights reserved
//% version 2.3, 21 Jan 2013
//% This software is provided 'as-is', without any express or implied
//% warranty.  In no event will the author be held liable for any damages
//% arising from the use of this software.
//% Permission is granted to anyone to use this software for any purpose,
//% including commercial applications, and to alter it and redistribute it
//% freely, subject to the following restrictions:
//% 1. The origin of this software must not be misrepresented; you must not
//%    claim that you wrote the original software. If you use this software
//%    in a product, an acknowledgment in the product documentation would be
//%    appreciated but is not required.
//% 2. Altered source versions must be plainly marked as such, and must not be
//%    misrepresented as being the original software.
//% 3. This notice may not be removed or altered from any source distribution.
//% Mark Adler    madler@alumni.caltech.edu

//% BEGIN CODE DERIVED FROM puff.{c,h}

#define MAXBITS 15
#define MAXLCODES 286
#define MAXDCODES 30
#define MAXCODES (MAXLCODES + MAXDCODES)
#define FIXLCODES 288

struct puff_state {
  unsigned char* out;
  unsigned long outlen;
  unsigned long outcnt;
  const unsigned char* in;
  unsigned long inlen;
  unsigned long incnt;
  int bitbuf;
  int bitcnt;
  jmp_buf env;
};
static int puff_bits(struct puff_state* s, int need)
{
  long val = s->bitbuf;
  while (s->bitcnt < need) {
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    val |= (long)(s->in[s->incnt++]) << s->bitcnt;
    s->bitcnt += 8;
  }
  s->bitbuf = (int)(val >> need);
  s->bitcnt -= need;
  return (int)(val & ((1L << need) - 1));
}
static int puff_stored(struct puff_state* s)
{
  s->bitbuf = 0;
  s->bitcnt = 0;
  if (s->incnt + 4 > s->inlen)
    return 2;
  unsigned len = s->in[s->incnt++];
  len |= s->in[s->incnt++] << 8;
  if (s->in[s->incnt++] != (~len & 0xff) ||
      s->in[s->incnt++] != ((~len >> 8) & 0xff))
    return -2;
  if (s->incnt + len > s->inlen)
    return 2;
  if (s->outcnt + len > s->outlen)
    return 1;
  for (; len--; s->outcnt++, s->incnt++) {
    if (s->in[s->incnt])
      s->out[s->outcnt] = s->in[s->incnt];
  }
  return 0;
}
struct puff_huffman {
  short* count;
  short* symbol;
};
static int puff_decode(struct puff_state* s, const struct puff_huffman* h)
{
  int first = 0;
  int index = 0;
  int bitbuf = s->bitbuf;
  int left = s->bitcnt;
  int code = first = index = 0;
  int len = 1;
  short* next = h->count + 1;
  while (1) {
    while (left--) {
      code |= bitbuf & 1;
      bitbuf >>= 1;
      int count = *next++;
      if (code - count < first) {
        s->bitbuf = bitbuf;
        s->bitcnt = (s->bitcnt - len) & 7;
        return h->symbol[index + (code - first)];
      }
      index += count;
      first += count;
      first <<= 1;
      code <<= 1;
      len++;
    }
    left = (MAXBITS + 1) - len;
    if (left == 0)
      break;
    if (s->incnt == s->inlen)
      longjmp(s->env, 1);
    bitbuf = s->in[s->incnt++];
    if (left > 8)
      left = 8;
  }
  return -10;
}
static int puff_construct(struct puff_huffman* h, const short* length, int n)
{
  int len;
  for (len = 0; len <= MAXBITS; len++)
    h->count[len] = 0;
  int symbol;
  for (symbol = 0; symbol < n; symbol++)
    (h->count[length[symbol]])++;
  if (h->count[0] == n)
    return 0;
  int left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= h->count[len];
    if (left < 0)
      return left;
  }
  short offs[MAXBITS + 1];
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++)
    offs[len + 1] = offs[len] + h->count[len];
  for (symbol = 0; symbol < n; symbol++)
    if (length[symbol] != 0)
      h->symbol[offs[length[symbol]]++] = symbol;
  return left;
}
static int puff_codes(struct puff_state* s, const struct puff_huffman* lencode,
                      const struct puff_huffman* distcode)
{
  static const short lens[29] = {3,  4,  5,  6,   7,   8,   9,   10,  11, 13,
                                 15, 17, 19, 23,  27,  31,  35,  43,  51, 59,
                                 67, 83, 99, 115, 131, 163, 195, 227, 258};
  static const short lext[29] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2,
                                 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0};
  static const short dists[30] = {
      1,    2,    3,    4,    5,    7,    9,    13,    17,    25,
      33,   49,   65,   97,   129,  193,  257,  385,   513,   769,
      1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
  static const short dext[30] = {0, 0, 0,  0,  1,  1,  2,  2,  3,  3,
                                 4, 4, 5,  5,  6,  6,  7,  7,  8,  8,
                                 9, 9, 10, 10, 11, 11, 12, 12, 13, 13};
  int symbol;
  do {
    symbol = puff_decode(s, lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 256) {
      if (s->outcnt == s->outlen)
        return 1;
      if (symbol)
        s->out[s->outcnt] = symbol;
      s->outcnt++;
    } else if (symbol > 256) {
      symbol -= 257;
      if (symbol >= 29)
        return -10;
      int len = lens[symbol] + puff_bits(s, lext[symbol]);
      symbol = puff_decode(s, distcode);
      if (symbol < 0)
        return symbol;
      unsigned dist = dists[symbol] + puff_bits(s, dext[symbol]);
      if (dist > s->outcnt)
        return -11;
      if (s->outcnt + len > s->outlen)
        return 1;
      while (len--) {
        if (dist <= s->outcnt && s->out[s->outcnt - dist])
          s->out[s->outcnt] = s->out[s->outcnt - dist];
        s->outcnt++;
      }
    }
  } while (symbol != 256);
  return 0;
}
static int puff_fixed(struct puff_state* s)
{
  static int virgin = 1;
  static short lencnt[MAXBITS + 1], lensym[FIXLCODES];
  static short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  static struct puff_huffman lencode, distcode;
  if (virgin) {
    lencode.count = lencnt;
    lencode.symbol = lensym;
    distcode.count = distcnt;
    distcode.symbol = distsym;
    short lengths[FIXLCODES];
    int symbol;
    for (symbol = 0; symbol < 144; symbol++)
      lengths[symbol] = 8;
    for (; symbol < 256; symbol++)
      lengths[symbol] = 9;
    for (; symbol < 280; symbol++)
      lengths[symbol] = 7;
    for (; symbol < FIXLCODES; symbol++)
      lengths[symbol] = 8;
    puff_construct(&lencode, lengths, FIXLCODES);
    for (symbol = 0; symbol < MAXDCODES; symbol++)
      lengths[symbol] = 5;
    puff_construct(&distcode, lengths, MAXDCODES);
    virgin = 0;
  }
  return puff_codes(s, &lencode, &distcode);
}
static int puff_dynamic(struct puff_state* s)
{
  static const short order[19] = {16, 17, 18, 0, 8,  7, 9,  6, 10, 5,
                                  11, 4,  12, 3, 13, 2, 14, 1, 15};
  int nlen = puff_bits(s, 5) + 257;
  int ndist = puff_bits(s, 5) + 1;
  int ncode = puff_bits(s, 4) + 4;
  if (nlen > MAXLCODES || ndist > MAXDCODES)
    return -3;
  short lengths[MAXCODES];
  int index;
  for (index = 0; index < ncode; index++)
    lengths[order[index]] = puff_bits(s, 3);
  for (; index < 19; index++)
    lengths[order[index]] = 0;
  short lencnt[MAXBITS + 1], lensym[MAXLCODES];
  struct puff_huffman lencode = {lencnt, lensym};
  int err = puff_construct(&lencode, lengths, 19);
  if (err != 0)
    return -4;
  index = 0;
  while (index < nlen + ndist) {
    int symbol;
    int len;
    symbol = puff_decode(s, &lencode);
    if (symbol < 0)
      return symbol;
    if (symbol < 16)
      lengths[index++] = symbol;
    else {
      len = 0;
      if (symbol == 16) {
        if (index == 0)
          return -5;
        len = lengths[index - 1];
        symbol = 3 + puff_bits(s, 2);
      } else if (symbol == 17)
        symbol = 3 + puff_bits(s, 3);
      else
        symbol = 11 + puff_bits(s, 7);
      if (index + symbol > nlen + ndist)
        return -6;
      while (symbol--)
        lengths[index++] = len;
    }
  }
  if (lengths[256] == 0)
    return -9;
  err = puff_construct(&lencode, lengths, nlen);
  if (err && (err < 0 || nlen != lencode.count[0] + lencode.count[1]))
    return -7;
  short distcnt[MAXBITS + 1], distsym[MAXDCODES];
  struct puff_huffman distcode = {distcnt, distsym};
  err = puff_construct(&distcode, lengths + nlen, ndist);
  if (err && (err < 0 || ndist != distcode.count[0] + distcode.count[1]))
    return -8;
  return puff_codes(s, &lencode, &distcode);
}
static int puff(unsigned char* dest, unsigned long* destlen,
                const unsigned char* source, unsigned long sourcelen)
{
  struct puff_state s = {
      .out = dest,
      .outlen = *destlen,
      .outcnt = 0,
      .in = source,
      .inlen = sourcelen,
      .incnt = 0,
      .bitbuf = 0,
      .bitcnt = 0,
  };
  int err;
  if (setjmp(s.env) != 0)
    err = 2;
  else {
    int last;
    do {
      last = puff_bits(&s, 1);
      int type = puff_bits(&s, 2);
      err = type == 0 ? puff_stored(&s)
                      : (type == 1 ? puff_fixed(&s)
                                   : (type == 2 ? puff_dynamic(&s) : -1));
      if (err != 0)
        break;
    } while (!last);
  }
  *destlen = s.outcnt;
  return err;
}

//% END CODE DERIVED FROM puff.{c,h}

#define ZLIB_HEADER_WIDTH 2

static int puff_zlib_to_file(const unsigned char* source,
                             unsigned long sourcelen, int dest_fd)
{
  if (sourcelen < ZLIB_HEADER_WIDTH)
    return 0;
  source += ZLIB_HEADER_WIDTH;
  sourcelen -= ZLIB_HEADER_WIDTH;
  const unsigned long max_destlen = 132 << 20;
  void* ret = mmap(0, max_destlen, PROT_WRITE | PROT_READ,
                   MAP_PRIVATE | MAP_ANON, -1, 0);
  if (ret == MAP_FAILED)
    return -1;
  unsigned char* dest = (unsigned char*)ret;
  unsigned long destlen = max_destlen;
  int err = puff(dest, &destlen, source, sourcelen);
  if (err) {
    munmap(dest, max_destlen);
    errno = -err;
    return -1;
  }
  if (write(dest_fd, dest, destlen) != (ssize_t)destlen) {
    munmap(dest, max_destlen);
    return -1;
  }
  return munmap(dest, max_destlen);
}

static int setup_loop_device(unsigned char* data, unsigned long size,
                             const char* loopname, int* loopfd_p)
{
  int err = 0, loopfd = -1;
  int memfd = syscall(__NR_memfd_create, "syzkaller", 0);
  if (memfd == -1) {
    err = errno;
    goto error;
  }
  if (puff_zlib_to_file(data, size, memfd)) {
    err = errno;
    goto error_close_memfd;
  }
  loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    err = errno;
    goto error_close_memfd;
  }
  if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
    if (errno != EBUSY) {
      err = errno;
      goto error_close_loop;
    }
    ioctl(loopfd, LOOP_CLR_FD, 0);
    usleep(1000);
    if (ioctl(loopfd, LOOP_SET_FD, memfd)) {
      err = errno;
      goto error_close_loop;
    }
  }
  close(memfd);
  *loopfd_p = loopfd;
  return 0;

error_close_loop:
  close(loopfd);
error_close_memfd:
  close(memfd);
error:
  errno = err;
  return -1;
}

static void reset_loop_device(const char* loopname)
{
  int loopfd = open(loopname, O_RDWR);
  if (loopfd == -1) {
    return;
  }
  if (ioctl(loopfd, LOOP_CLR_FD, 0)) {
  }
  close(loopfd);
}

static long syz_mount_image(volatile long fsarg, volatile long dir,
                            volatile long flags, volatile long optsarg,
                            volatile long change_dir,
                            volatile unsigned long size, volatile long image)
{
  unsigned char* data = (unsigned char*)image;
  int res = -1, err = 0, need_loop_device = !!size;
  char* mount_opts = (char*)optsarg;
  char* target = (char*)dir;
  char* fs = (char*)fsarg;
  char* source = NULL;
  char loopname[64];
  if (need_loop_device) {
    int loopfd;
    memset(loopname, 0, sizeof(loopname));
    snprintf(loopname, sizeof(loopname), "/dev/loop%llu", procid);
    if (setup_loop_device(data, size, loopname, &loopfd) == -1)
      return -1;
    close(loopfd);
    source = loopname;
  }
  mkdir(target, 0777);
  char opts[256];
  memset(opts, 0, sizeof(opts));
  if (strlen(mount_opts) > (sizeof(opts) - 32)) {
  }
  strncpy(opts, mount_opts, sizeof(opts) - 32);
  if (strcmp(fs, "iso9660") == 0) {
    flags |= MS_RDONLY;
  } else if (strncmp(fs, "ext", 3) == 0) {
    bool has_remount_ro = false;
    char* remount_ro_start = strstr(opts, "errors=remount-ro");
    if (remount_ro_start != NULL) {
      char after = *(remount_ro_start + strlen("errors=remount-ro"));
      char before = remount_ro_start == opts ? '\0' : *(remount_ro_start - 1);
      has_remount_ro = ((before == '\0' || before == ',') &&
                        (after == '\0' || after == ','));
    }
    if (strstr(opts, "errors=panic") || !has_remount_ro)
      strcat(opts, ",errors=continue");
  } else if (strcmp(fs, "xfs") == 0) {
    strcat(opts, ",nouuid");
  }
  res = mount(source, target, fs, flags, opts);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  res = open(target, O_RDONLY | O_DIRECTORY);
  if (res == -1) {
    err = errno;
    goto error_clear_loop;
  }
  if (change_dir) {
    res = chdir(target);
    if (res == -1) {
      err = errno;
    }
  }

error_clear_loop:
  if (need_loop_device)
    reset_loop_device(loopname);
  errno = err;
  return res;
}

#define FS_IOC_SETFLAGS _IOW('f', 2, long)
static void remove_dir(const char* dir)
{
  int iter = 0;
  DIR* dp = 0;
  const int umount_flags = MNT_FORCE | UMOUNT_NOFOLLOW;

retry:
  while (umount2(dir, umount_flags) == 0) {
  }
  dp = opendir(dir);
  if (dp == NULL) {
    if (errno == EMFILE) {
      exit(1);
    }
    exit(1);
  }
  struct dirent* ep = 0;
  while ((ep = readdir(dp))) {
    if (strcmp(ep->d_name, ".") == 0 || strcmp(ep->d_name, "..") == 0)
      continue;
    char filename[FILENAME_MAX];
    snprintf(filename, sizeof(filename), "%s/%s", dir, ep->d_name);
    while (umount2(filename, umount_flags) == 0) {
    }
    struct stat st;
    if (lstat(filename, &st))
      exit(1);
    if (S_ISDIR(st.st_mode)) {
      remove_dir(filename);
      continue;
    }
    int i;
    for (i = 0;; i++) {
      if (unlink(filename) == 0)
        break;
      if (errno == EPERM) {
        int fd = open(filename, O_RDONLY);
        if (fd != -1) {
          long flags = 0;
          if (ioctl(fd, FS_IOC_SETFLAGS, &flags) == 0) {
          }
          close(fd);
          continue;
        }
      }
      if (errno == EROFS) {
        break;
      }
      if (errno != EBUSY || i > 100)
        exit(1);
      if (umount2(filename, umount_flags))
        exit(1);
    }
  }
  closedir(dp);
  for (int i = 0;; i++) {
    if (rmdir(dir) == 0)
      break;
    if (i < 100) {
      if (errno == EPERM) {
        int fd = open(dir, O_RDONLY);
        if (fd != -1) {
          long flags = 0;
          if (ioctl(fd, FS_IOC_SETFLAGS, &flags) == 0) {
          }
          close(fd);
          continue;
        }
      }
      if (errno == EROFS) {
        break;
      }
      if (errno == EBUSY) {
        if (umount2(dir, umount_flags))
          exit(1);
        continue;
      }
      if (errno == ENOTEMPTY) {
        if (iter < 100) {
          iter++;
          goto retry;
        }
      }
    }
    exit(1);
  }
}

static void kill_and_wait(int pid, int* status)
{
  kill(-pid, SIGKILL);
  kill(pid, SIGKILL);
  for (int i = 0; i < 100; i++) {
    if (waitpid(-1, status, WNOHANG | __WALL) == pid)
      return;
    usleep(1000);
  }
  DIR* dir = opendir("/sys/fs/fuse/connections");
  if (dir) {
    for (;;) {
      struct dirent* ent = readdir(dir);
      if (!ent)
        break;
      if (strcmp(ent->d_name, ".") == 0 || strcmp(ent->d_name, "..") == 0)
        continue;
      char abort[300];
      snprintf(abort, sizeof(abort), "/sys/fs/fuse/connections/%s/abort",
               ent->d_name);
      int fd = open(abort, O_WRONLY);
      if (fd == -1) {
        continue;
      }
      if (write(fd, abort, 1) < 0) {
      }
      close(fd);
    }
    closedir(dir);
  } else {
  }
  while (waitpid(-1, status, __WALL) != pid) {
  }
}

static void reset_loop()
{
  char buf[64];
  snprintf(buf, sizeof(buf), "/dev/loop%llu", procid);
  int loopfd = open(buf, O_RDWR);
  if (loopfd != -1) {
    ioctl(loopfd, LOOP_CLR_FD, 0);
    close(loopfd);
  }
}

static void setup_test()
{
  prctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0);
  setpgrp();
  write_file("/proc/self/oom_score_adj", "1000");
  if (symlink("/dev/binderfs", "./binderfs")) {
  }
}

#define USLEEP_FORKED_CHILD (3 * 50 * 1000)

static long handle_clone_ret(long ret)
{
  if (ret != 0) {
    return ret;
  }
  usleep(USLEEP_FORKED_CHILD);
  syscall(__NR_exit, 0);
  while (1) {
  }
}

static long syz_clone(volatile long flags, volatile long stack,
                      volatile long stack_len, volatile long ptid,
                      volatile long ctid, volatile long tls)
{
  long sp = (stack + stack_len) & ~15;
  long ret = (long)syscall(__NR_clone, flags & ~CLONE_VM, sp, ptid, ctid, tls);
  return handle_clone_ret(ret);
}

static void execute_one(void);

#define WAIT_FLAGS __WALL

static void loop(void)
{
  int iter = 0;
  for (;; iter++) {
    char cwdbuf[32];
    sprintf(cwdbuf, "./%d", iter);
    if (mkdir(cwdbuf, 0777))
      exit(1);
    reset_loop();
    int pid = fork();
    if (pid < 0)
      exit(1);
    if (pid == 0) {
      if (chdir(cwdbuf))
        exit(1);
      setup_test();
      execute_one();
      exit(0);
    }
    int status = 0;
    uint64_t start = current_time_ms();
    for (;;) {
      sleep_ms(10);
      if (waitpid(-1, &status, WNOHANG | WAIT_FLAGS) == pid)
        break;
      if (current_time_ms() - start < 5000)
        continue;
      kill_and_wait(pid, &status);
      break;
    }
    remove_dir(cwdbuf);
  }
}

uint64_t r[2] = {0xffffffffffffffff, 0xffffffffffffffff};

void execute_one(void)
{
  intptr_t res = 0;
  if (write(1, "executing program\n", sizeof("executing program\n") - 1)) {
  }
  syscall(__NR_mmap, /*addr=*/0x200000000000ul, /*len=*/0x200000ul,
          /*prot=PROT_GROWSUP|PROT_WRITE|PROT_EXEC*/ 0x2000006ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_SHARED*/ 0x31ul,
          /*fd=*/(intptr_t)-1, /*offset=*/0xffffc000ul);
  syz_clone(
      /*flags=CLONE_IO|CLONE_NEWUSER|CLONE_NEWUTS|CLONE_NEWCGROUP|CLONE_CHILD_CLEARTID|0x140011*/
      0x96340011, /*stack=*/0, /*stack_len=*/0, /*parentid=*/0, /*childtid=*/0,
      /*tls=*/0);
  memcpy((void*)0x200000000780, "ext4\000", 5);
  memcpy((void*)0x2000000007c0, "./file0\000", 8);
  memcpy((void*)0x200000000040, "dioread_lock", 12);
  *(uint8_t*)0x20000000004c = 0x2c;
  memcpy((void*)0x20000000004d, "delalloc", 8);
  *(uint8_t*)0x200000000055 = 0x2c;
  memcpy((void*)0x200000000056, "discard", 7);
  *(uint8_t*)0x20000000005d = 0x2c;
  *(uint8_t*)0x20000000005e = 0;
  memcpy(
      (void*)0x200000000f80,
      "\x78\x9c\xec\xdd\xcf\x8b\x1b\x55\x1c\x00\xf0\xef\xa4\x9b\x6e\x6d\x6b\xbb"
      "\x82\x07\xeb\x29\xd0\x83\x85\xd2\xac\xdb\x6e\xa5\x82\x87\x8a\x88\x1e\xac"
      "\x14\xec\xc5\x53\x1b\x92\x74\xa9\x9b\x6c\xca\x26\x5b\xbb\xcb\x82\xf6\xa0"
      "\x17\x0f\x8a\xf8\x0f\x78\x54\xe8\x59\xc4\x8b\x08\x82\x20\x78\xe8\x49\xf1"
      "\x1f\x90\x42\x91\x45\x90\x56\x84\x95\xc9\x8f\x36\xed\x26\x6d\x76\xbb\xd9"
      "\x54\xf2\xf9\xc0\x94\xf7\xe6\x47\xdf\xfb\x66\xe6\xcd\x7b\x9b\x79\x64\x02"
      "\x18\x5b\xb9\xf4\x9f\x4c\xc4\xa1\x88\xf8\x2c\x89\x38\xd8\x5e\x9f\x44\x44"
      "\xb6\x99\x9a\x88\x38\xdd\xda\xef\xce\xda\x6a\x31\x5d\x92\x58\x5f\x7f\xe7"
      "\xcf\xa4\xb9\xcf\xed\xb5\xd5\x62\x74\x1d\x93\xda\xd7\xce\x3c\x17\x11\x3f"
      "\x7c\x14\x71\x34\xb3\xb1\xdc\xfa\xf2\xca\x7c\xa1\x52\x29\x2f\xb6\xf3\xd3"
      "\x8d\xea\xe5\xe9\xfa\xf2\xca\xb1\x4b\xd5\xc2\x5c\x79\xae\xbc\x70\x62\xf6"
      "\xe4\xa9\xd9\x97\x5f\x9a\x39\x39\xbb\x6d\xb1\x66\xbe\xa9\x5e\xdf\xf5\xdd"
      "\x1b\xbf\x5f\xfb\xe4\xc0\x8d\x8f\x7f\x7b\x77\x5f\x12\xa7\x63\x7f\x7b\x5b"
      "\x77\x1c\xdb\x25\x17\xb9\xd6\x67\x92\xc9\xa6\x1f\xe1\x7d\x5e\xdb\xee\xc2"
      "\x46\x2c\x19\x75\x05\xd8\x92\xb4\x69\xee\x6a\xb5\xf2\x38\xd4\x6c\xf0\x13"
      "\xa3\xae\x12\x00\x30\x64\x1f\x44\xc4\x3a\x00\x30\x66\x92\x41\xfb\xff\x81"
      "\x77\x04\x00\x9e\x6c\x9d\xef\x01\x6e\xaf\xad\x16\x3b\xcb\x68\xbf\x91\xd8"
      "\x59\xb7\x5e\x8d\x88\x3d\xad\xf8\x3b\xcf\x37\x5b\x5b\x26\xda\xcf\xec\xf6"
      "\x34\x9f\x83\xee\xfd\x2b\xb9\xef\xc9\x48\x12\x11\x53\xdb\x50\x7e\x2e\x22"
      "\xfe\xfd\xf1\xf3\xf7\xd2\x25\x86\xf4\x1c\x12\xa0\x97\x0f\xaf\x45\xc4\x85"
      "\xa9\xdc\xc6\xfb\x7f\xb2\x61\xce\xc2\x66\xbd\x38\xc0\x3e\xb9\x07\xf2\xee"
      "\x7f\xb0\x73\xbe\x4f\xc7\x3f\xa7\x7a\x8d\xff\x32\x77\xc7\x3f\xd1\x63\xfc"
      "\x33\xd9\xa3\xed\x6e\xc5\xa3\xdb\x7f\xe6\xe6\x36\x14\xd3\x57\x3a\xfe\x7b"
      "\xa5\x6b\x6e\xdb\x9d\xae\xf8\xdb\xa6\x76\xb5\x73\x4f\x37\xc7\x7c\xd9\xe4"
      "\xe2\xa5\x4a\x39\xbd\xb7\x1d\x88\x88\x23\x91\x9d\x4c\xf3\x33\x0f\x29\xe3"
      "\xef\xe2\x8d\x4f\xfb\x6d\xeb\x1e\xff\xa5\x4b\x5a\x7e\x67\x2c\xd8\xae\xc7"
      "\xcd\x89\xc9\xfb\x8f\x29\x15\x1a\x85\xc7\x89\xb9\xdb\xad\x6b\x11\xcf\x4f"
      "\xf4\x8a\x3f\xb9\x7b\xfe\x93\x3e\xe3\xdf\xb3\x03\x96\xf1\xf5\xfb\x3f\xdf"
      "\xe9\xb7\xed\xd1\xf1\x0f\xd7\xfa\x97\x11\x2f\xf4\x3c\xff\xf7\x66\xb4\x25"
      "\x3d\xe7\x27\x76\xb6\xce\x4e\x37\xaf\x87\xe9\xce\x55\xb1\xd1\xed\x37\xaf"
      "\x5f\xed\x57\xfe\xa8\xe3\x4f\xcf\xff\xde\x87\xc7\x3f\x95\x74\xcf\xd7\xac"
      "\x6f\xbe\x8c\xaf\xbe\x3d\xdc\x77\xba\xe3\x56\xaf\xff\xdd\xc9\xb9\x66\x7a"
      "\x77\x7b\xdd\xd5\x42\xa3\xb1\x38\x13\xb1\x3b\x79\x6b\xe3\xfa\xe3\xf7\x8e"
      "\xed\xe4\x3b\xfb\xa7\xf1\x1f\x39\xdc\xbb\xfd\x3f\xec\xfa\x4f\xff\x26\xbc"
      "\x30\x60\xfc\x6f\xff\x94\xfb\x65\xeb\xf1\x0f\x57\x1a\x7f\x69\x53\xe7\x7f"
      "\xf3\x89\x5f\x5f\x3f\x77\xac\x5f\xf9\x83\x9d\xff\xd6\x1c\xe0\x23\xed\x35"
      "\x83\xdc\xff\x06\xad\xe0\xe3\x7c\x76\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x30\xa8\x4c\x44\xec\x8f\x24\x93"
      "\xbf\x9b\xce\x64\xf2\xf9\xd6\x3b\xbc\x9f\x8d\xbd\x99\x4a\xad\xde\x38\x7a"
      "\xb1\xb6\xb4\x50\x8a\xe6\xbb\xb2\xa7\x22\x9b\xe9\xfc\xd2\xe5\xc1\xae\xdf"
      "\x43\x9d\x69\xff\x1e\x7e\x27\x7f\xfc\x81\xfc\x89\x88\x78\x26\x22\xbe\x98"
      "\x7c\xaa\x99\xcf\x17\x6b\x95\xd2\xa8\x83\x07\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x80\xb6\x7d\x7d\xde\xff\x9f\xfa\x63\x72\xd4\xb5\x03"
      "\x00\x86\x66\xcf\xa8\x2b\x00\x00\xec\x38\xfd\x3f\x00\x8c\x1f\xfd\x3f\x00"
      "\x8c\x1f\xfd\x3f\x00\x8c\x1f\xfd\x3f\x00\x8c\x1f\xfd\x3f\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x43\x76\xf6\xcc\x99\x74\x59"
      "\xff\x67\x6d\xb5\x98\xe6\x4b\x57\x96\x97\xe6\x6b\x57\x8e\x95\xca\xf5\xf9"
      "\x7c\x75\xa9\x98\x2f\xd6\x16\x2f\xe7\xe7\x6a\xb5\xb9\x4a\x39\x5f\xac\x55"
      "\x1f\xf5\xff\x55\x6a\xb5\xcb\xc7\x63\x61\xe9\xea\x74\xa3\x5c\x6f\x4c\xd7"
      "\x97\x57\xce\x57\x6b\x4b\x0b\x8d\xf3\x97\xaa\x85\xb9\xf2\xf9\x72\x76\x47"
      "\xa2\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xcd\xa9\x2f"
      "\xaf\xcc\x17\x2a\x95\xf2\xa2\x84\xc4\x90\x12\x11\x4f\x44\x35\xc6\x2f\x91"
      "\x8d\xc7\x38\x7c\xd4\x77\x26\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\xff"
      "\x87\xff\x02\x00\x00\xff\xff\x75\x9a\x2c\x84",
      1883);
  syz_mount_image(/*fs=*/0x200000000780, /*dir=*/0x2000000007c0,
                  /*flags=MS_POSIXACL|MS_SYNCHRONOUS|MS_NODIRATIME*/ 0x10810,
                  /*opts=*/0x200000000040, /*chdir=*/1, /*size=*/0x75b,
                  /*img=*/0x200000000f80);
  memcpy((void*)0x200000000040, "./file1\000", 8);
  res = syscall(
      __NR_openat, /*fd=*/0xffffff9c, /*file=*/0x200000000040ul,
      /*flags=O_DIRECT|O_CREAT|O_RDWR*/ 0x4042,
      /*mode=S_IXOTH|S_IROTH|S_IXGRP|S_IWGRP|S_IRGRP|S_IXUSR|S_IWUSR*/ 0xfd);
  if (res != -1)
    r[0] = res;
  syscall(__NR_openat, /*fd=*/0xffffffffffffff9cul, /*file=*/0ul,
          /*flags=O_SYNC|O_NONBLOCK|O_DIRECT|O_CREAT|O_CLOEXEC*/ 0x185840,
          /*mode=*/0);
  memcpy((void*)0x200000000080, "/dev/loop#\000", 11);
  res = -1;
  res = syz_open_dev(/*dev=*/0x200000000080, /*id=*/0xb28f,
                     /*flags=O_DIRECT*/ 0x4000);
  if (res != -1)
    r[1] = res;
  *(uint32_t*)0x200000000140 = 0;
  *(uint16_t*)0x200000000148 = 0;
  *(uint64_t*)0x200000000150 = 0;
  *(uint16_t*)0x200000000158 = 0;
  *(uint32_t*)0x200000000160 = 8;
  *(uint32_t*)0x200000000164 = 0;
  *(uint32_t*)0x200000000168 = 0xe;
  *(uint32_t*)0x20000000016c = 0xd;
  memcpy((void*)0x200000000170,
         "\xcc\xd9\x15\x76\x10\xae\x6a\x61\x31\xab\x90\x33\x16\xaa\x03\xea\xcc"
         "\x52\xa5\xa8\xf1\x8a\x7d\xc9\x87\x6f\xce\x51\xf9\xb8\x4c\xb7\x52\xcb"
         "\x82\xac\xcb\x9e\x43\xf0\x36\xa4\xc2\xc4\xd1\x76\xa6\x9c\xc4\xb4\x2e"
         "\x1f\x6b\x5e\x38\x90\xd2\x22\xec\x8f\xa6\xf1\x7c\xb5",
         64);
  memcpy((void*)0x2000000001b0,
         "\xff\x3c\xa6\x5c\xc8\xe3\xc8\x66\x63\x30\x74\xa7\x16\x03\xd8\x10\x40"
         "\x90\xe8\x7e\x07\xa2\xd4\x21\x58\xc7\xf4\x34\x3e\xff\x28\xa4",
         32);
  *(uint64_t*)0x2000000001d0 = 0xbd5;
  *(uint64_t*)0x2000000001d8 = 0x7f;
  *(uint32_t*)0x2000000001e0 = 0;
  syscall(__NR_ioctl, /*fd=*/r[1], /*cmd=*/0x4c02, /*arg=*/0x200000000140ul);
  memcpy(
      (void*)0x200000001700,
      "\x04\xac\x84\x07\x16\x88\x7f\xd0\xe2\x74\xf9\xef\x59\x72\x74\xc7\xdf\xd7"
      "\xf7\x63\x3e\x00\x98\xad\xb2\xaf\x6a\x69\x92\x34\xca\x98\x7a\xde\x81\x50"
      "\xf5\x10\x9f\x07\xb8\xc4\xe9\xe1\x44\xc4\xfe\xa6\xcf\x54\xee\xd2\x5f\x0e"
      "\x23\x4d\x5b\x4e\x9a\xc0\x3b\xd8\x31\x25\x52\x4f\x96\x25\xfa\x6b\xc5\x9b"
      "\xf2\x43\xbc\xd6\xa3\x05\xd3\x3a\x8e\x0c\xf6\xbd\x42\xa2\xc5\x2f\x43\x85"
      "\x62\xa8\x24\xca\x6d\x35\x44\x7d\xb8\x58\x56\x59\xa0\x75\x8e\xa5\x6b\x0e"
      "\x62\x2a\x7d\x4b\x7b\x9c\xae\x8b\x80\xd5\xb4\xb7\x04\xfb\x84\x59\x16\xa8"
      "\xd1\xc3\x67\x52\x22\x98\x64\x21\x51\xfd\xd4\xd7\xfe\x15\x32\x93\x3a\x79"
      "\x13\xe0\x1f\x5b\x72\xbb\x9c\x07\x38\x69\x14\xfe\xd1\xe1\x86\xb3\x5d\xe0"
      "\xdb\x99\x0c\xff\xf1\xb3\xd0\x7a\x91\x0a\xd1\xfc\x20\xf5\xe5\x9b\x27\xd6"
      "\xff\xf1\xe6\x61\x21\x3c\xf0\x6d\xa6\xed\xc2\x9e\xdf\x6b\x61\x35\x02\xea"
      "\x88\xc6\xaa\x28\x8c\xe9\x9a\x54\xc9\xdc\xf1\x7c\xaf\x7e\x30\x46\x58\x9d"
      "\x20\x12\x6d\x23\x72\xf5\x01\x3c\x24\x6b\xca\x17\xca\xe6\xe3\x06\xcf\xa7"
      "\x66\xe8\xe6\x73\x23\x9e\x96\x7f\x85\x8f\x50\x18\x28\x41\x5c\xd5\xa8\xc4"
      "\x95\x93\x7a\xd0\x2f\x77\x09\xb2\x99\x28\x55\xf2\x31\x92\xae\x1e\x0f\xf5"
      "\xae\x72\xd3\xdb\x4b\x50\xba\xd5\x76\x6a\x17\x40\x6d\x4c\x30\x46\x73\x3d"
      "\x40\x39\x19\xa9\xa7\xba\xf5\x5a\xa3\xd7\x7d\x5e\xb6\x75\x0c\x37\x11\xc1"
      "\x8c\x99\x2e\xc7\xf4\x39\x41\xe3\x37\xec\xbb\xb3\xce\xbf\x8e\x81\xae\xd0"
      "\x28\xeb\x5a\x33\xcf\xde\xdb\x07\x85\xd2\xbb\xcd\xb3\x53\x11\x86\xa0\x92"
      "\x15\x5b\xf8\x69\xd5\x80\x11\x52\xdb\x1c\xa1\x51\x58\x16\xe4\x96\x7e\xac"
      "\x3a\x1f\xb2\x22\x01\x4d\x52\x44\xd3\x7c\x89\xd4\x26\x42\x96\x6c\xdc\x9f"
      "\xed\x19\x25\xdf\x60\xd9\x7b\xe9\x03\xad\x84\x0b\xe0\xf2\xd6\xcd\x68\xc8"
      "\x09\xd7\x1b\x81\x2b\x23\x0a\x1a\xcd\x1a\x0b\xe2\x99\x0c\xa7\xa9\xea\xd9"
      "\x9f\x2b\x1b\xe3\x81\xf9\xda\xd2\xf3\xc9\x5e\x4b\xe1\xe3\xa3\xcd\x11\xaf"
      "\x00\xef\x9d\x51\x69\xe1\x67\xcd\xf2\xd0\xae\x67\xcc\xb0\xc9\x36\x15\xa6"
      "\x3d\xe3\x1b\xe4\x5f\xb8\x14\x28\xa8\x4f\x02\x25\x2f\x2d\x7c\xe5\xfd\x6e"
      "\x53\xa0\x7e\x8f\x26\x16\x14\xfd\x9f\x15\xa8\x2c\xc4\xee\xe9\xac\xd7\x97"
      "\xa5\x66\x27\x91\x40\xf9\x51\x9d\xee\xbd\x68\x8a\xc0\x69\x15\x6c\xb0\x45"
      "\xb4\xd9\x2b\x59\x41\xd8\xfd\x3d\xdd\xd1\x50\xd0\x74\xa9\x85\x2c\x98\x99"
      "\x2b\x30\x7e\xcd\xdb\x8f\x43\x47\x63\xfd\x77\x76\x4d\x9f\x7c\x62\x1e\x20"
      "\x3c\x97\x1c\x0a\x79\x3d\x4e\x01\x66\xb7\x2e\xf1\xa3\x96\xb1\x53\xd8\xaf"
      "\x30\xa9\x7d\xcc\x74\x11\xdd\x9f\xd0\x5d\x7a\x6a\x61\x21\xf2\x85\x0d\x7e"
      "\xd9\x25\xee\x84\xfb\x26\x88\xf4\xba\x3c\x61\x60\xa4\xa3\x34\xbd\x20\x29"
      "\xec\xef\x07\x5d\xf8\xff\x69\xd5\xec\xaf\x9d\x09\x33\xc0\x79\x37\x5b\x28"
      "\x0f\x20\x62\xf8\xcf\xf2\x59\x2e\xf3\x86\x1a\xbb\xf4\x99\xb5\x97\x16\x7c"
      "\x44\x31\x5b\xa4\x88\x45\x56\xcb\xe6\xcc\x23\x54\xcc\x7e\xe5\xc6\x49\x4e"
      "\x31\xc5\x80\x32\xdd\x24\x86\x2f\x2d\x69\xbc\x63\xbc\xa8\x58\x3b\x41\x71"
      "\x8d\xa3\xa0\x3a\xfd\x6d\xd0\xc2\x48\x05\x86\x92\xb6\xfe\x25\x56\xe2\x4a"
      "\xae\xbe\x14\x2d\x37\x11\xa0\xc4\x9c\xa0\x02\x36\x4e\xc1\xf4\x06\xae\x11"
      "\x02\x55\x2d\xb8\x48\xf4\xaa\x0a\x57\xf6\x72\x5d\xde\x10\x92\x4a\xfc\x44"
      "\xd2\xc3\x31\xbe\xb9\xcf\x9b\x64\xb3\x99\x81\xbf\xf8\xd3\xe8\x97\x7f\x9f"
      "\x7d\x61\x8f\xa4\x9d\x52\x67\x25\x2c\x47\x91\xd9\x8f\xbb\x0c\xe4\x49\x5b"
      "\x68\x73\x9f\xde\xd0\x3b\x90\x11\xdb\xd8\x50\x4b\x9d\x43\x23\xcd\x69\x06"
      "\x1f\x80\xbf\x45\xe3\xfc\x56\x61\xce\xe2\xd8\x05\xa7\x50\xc1\x5b\x0a\xa6"
      "\x68\x88\x06\xd2\x1e\x41\x6c\xba\xfb\xa4\x7c\x66\xe8\xff\x3d\xf7\xc8\x09"
      "\x4b\xb8\x74\x05\x73\x0e\x87\x28\xbc\x7f\x48\xbe\x55\x4f\x04\x11\xba\x23"
      "\x49\xd9\xeb\x55\x15\x47\xe4\x3e\xf8\xc0\xa5\xa0\x04\xe0\x52\x47\x94\x15"
      "\x23\xa3\xfd\x5f\xb4\x3f\x9d\x24\x67\xe5\xc9\x62\x00\xf6\xf3\x1f\x73\x63"
      "\x35\x2a\xdc\x85\x18\x5d\x50\x2a\x92\x18\xf4\xfc\xa5\x4b\x7b\x07\x9b\xc5"
      "\x88\x15\xfd\x85\x8a\x79\x38\x3c\x3e\x89\x75\x67\xc4\x5a\xf5\x0d\x42\x5c"
      "\x51\x0c\xd6\xe7\x08\xd9\x02\x3f\xba\x63\x02\xf7\x8e\xaf\xee\xfb\x46\xd9"
      "\xff\x8b\x32\x68\xb1\x3c\xe6\xac\xe4\x14\xb0\xdc\x3a\xe4\x4e\x17\xdc\x27"
      "\x1a\x1c\x78\x13\x76\x5c\x07\xb0\xc1\xe2\x48\xe9\x98\x9b\xee\xaf\x68\xfb"
      "\xd6\xf4\x9d\x8a\xda\xb5\x7f\x90\x27\x84\x5a\x1a\x4c\x3c\x56\x01\xe3\xf5"
      "\x54\x00\x55\xd5\xd1\xb6\x8d\x6f\x36\x40\x77\x33\x96\x60\x76\x04\xf0\xf2"
      "\x23\x78\x2e\xd6\x71\xb5\xca\x99\xc2\x72\x31\x1b\x61\x8b\x96\x13\x55\x14"
      "\xbb\x8a\xb9\x4b\x7c\x9b\x86\x36\x5f\x0e\xce\x16\x21\x30\x04\xaa\x9e\x8d"
      "\xde\x24\x2e\x5c\x3d\xfe\x2a\xb2\x1f\x33\xde\xed\x87\x50\x3b\x3b\x95\x8d"
      "\xaf\xd1\xd4\x11\x50\x6e\xad\xaf\xac\x1f\x98\xe3\x88\x16\xe9\xc2\x34\x21"
      "\x13\x1e\xcf\x11\xd7\x08\xf8\x4e\x6e\xe8\xa0\xf8\x13\xcf\x06\x66\x8e\x63"
      "\x0e\xdd\x06\xeb\xce\x1d\x32\x38\xfc\x70\xd5\x93\x17\xed\x25\x7c\xe0\x44"
      "\x0b\x0c\xc0\x37\x97\x53\xe0\xd5\xb1\xf9\xab\xa8\x05\x59\x79\x2f\x3a\x94"
      "\x20\x92\x53\x01\x74\x4e\x2f\x29\xe8\x22\x50\xff\x7e\xf5\x93\x7f\xc4\xce"
      "\xaf\xb7\xab\x98\x28\x53\xfc\x65\xfd\xcd\x8c\xb0\x38\x31\x93\xc1\x56\xf5"
      "\x44\xea\xc7\xee\xcc\x2c\x76\x2d\x10\xe9\x90\x16\x38\xa6\x10\x41\x27\x69"
      "\x1f\x1f\xfb\x22\x6a\x51\x51\x6a\xfa\xf5\xc4\xc7\xe1\xdc\x1d\x7d\x34\xea"
      "\x21\xce\xce\xba\xc7\x93\xc8\x56\xdf\x1a\x69\x04\x3e\x9d\xcc\x42\x41\x47"
      "\x17\x45\xfd\x07\xcc\x16\x1c\xa9\x1c\x81\xe7\x1c\x0a\x58\x09\xfb\x94\xbd"
      "\xa1\xc1\x2a\xc9\x7a\xb7\x45\xcf\x4f\x34\x27\x3e\x01\x9e\x4b\xa7\xe0\xdf"
      "\x46\x3a\xc1\x3b\xcd\x78\x2a\x9e\x35\x72\x35\x80\x8f\xa8\xf9\x16\x93\x54"
      "\x28\x76\x22\x51\xe1\xea\x3a\x2e\x5e\x22\xd5\x03\xe4\xbf\xbf\x02\xc6\x94"
      "\x80\x26\xd6\x04\x90\x3f\xde\x33\x9a\xac\x8c\x42\x59\x7d\xd5\x35\x5e\x3c"
      "\xbc\x3f\x52\x7a\xc4\x31\x92\x8c\xbf\x1e\xb8\xce\x44\xe1\x42\xb5\x09\x83"
      "\x2f\x3f\x97\x06\xc7\x46\x6f\x2f\x7f\x3f\xfa\xa9\x64\x6b\xa7\xb9\xd4\xa2"
      "\x92\xd0\x85\xc7\xb7\x51\xd0\xcf\xdc\xe0\xe5\xed\x88\x1d\x5a\xa3\x73\xa4"
      "\xb9\xf5\x88\x3a\x24\x97\xc4\x5e\xd8\x3e\x1d\x46\xcc\x3e\x07\xb6\xcc\xf6"
      "\xb8\x70\x56\xe7\xe4\x11\x83\x34\x97\x03\xa2\x1b\x00\xca\x29\xc5\x9f\x5d"
      "\x2c\x90\xf6\xee\x74\x2b\x06\x1c\x9f\xf1\x84\xf2\xc9\xb9\x87\x84\xc7\xb2"
      "\xc1\x31\x89\xaa\x5b\x27\xff\x10\x53\x39\x5d\xc5\xd6\xd8\x69\xad\x37\x07"
      "\xcf\xdd\x1e\x00\x6a\x0f\xac\x22\x7b\x7a\x3f\xcb\x0c\xd9\xf0\x24\xfc\x25"
      "\x89\x0b\xa7\x17\xe0\xa0\xc2\x6e\x31\xa4\xb2\x8f\x0b\xe8\x6b\xde\x3b\xd1"
      "\xbc\xd1\x0f\x88\xb4\x97\x1d\xc8\x89\xbc\x76\x53\x7e\x9f\x2e\x1a\x22\xe4"
      "\xa0\x92\x71\xa9\x5e\xf2\x03\x71\x61\x97\xb0\xb8\x46\x6f\x31\x07\xdd\x93"
      "\x74\xcd\xfa\xdf\x4a\x9f\x30\x3f\x12\x3a\xdc\x92\x90\x79\x4b\xd8\x86\x54"
      "\x81\xe3\x1e\x01\x9d\xc4\x32\x5c\x28\x19\x99\x7c\x4c\x35\x0b\xc1\x10\xab"
      "\x53\x79\x00\x0c\x8b\xd2\x2e\x1b\xcf\x88\x45\x3a\x4a\xf0\x20\x5c\xd2\x35"
      "\x5e\xcd\x44\x41\x08\x1f\xed\x28\xdb\xcc\xe2\x02\xa7\x63\x36\xf7\x07\xb0"
      "\xeb\xdd\xcc\xe4\xc4\xac\x94\x11\x6d\xe9\x8d\xa3\x14\x0c\xcf\x9a\xb6\x14"
      "\x6b\x96\xf2\x65\x80\x0e\x3a\x5d\xa7\xe6\x33\x70\x32\x1d\x21\x93\x42\x18"
      "\x6f\x9f\x3b\x54\x43\xb7\xe3\x19\xdc\x67\xe2\x31\xf5\xa1\x77\x41\x68\xd7"
      "\x3f\xfa\xdb\x18\x04\x56\x51\x45\xc8\xc9\x08\x77\xcc\xfb\x6b\xfa\x9a\x44"
      "\xb4\xf6\xa8\xd7\xa4\x35\xd4\x6c\x62\xbe\x70\x2c\x90\x51\xec\xd4\xdc\x79"
      "\x33\x4c\x0d\xd8\xb0\x8e\xd2\xfc\x42\xef\xde\xd4\x13\x97\x10\x98\xca\x5e"
      "\x8c\xbf\x01\x2f\x19\x29\xa3\x6f\xf6\x06\x76\xe1\x9d\x6b\xa2\xdd\xc3\x38"
      "\xca\x69\x40\xcc\x4e\xf4\x94\x81\xfc\xd2\x9e\x5c\xbf\x4b\xd7\xcd\x11\x88"
      "\x78\xdc\xfb\x3b\x05\x52\xc0\xe5\xfa\x3c\x9e\x6c\x39\xd2\x21\x5e\xea\xe0"
      "\x2d\x6b\xfa\xa4\xf4\x60\x87\x32\x8d\xb0\x48\x4e\x8a\x25\x0a\x29\x37\x56"
      "\x6e\x1f\x4a\x9d\x5f\xfe\x59\x97\x23\x96\x33\xb8\x8d\xf5\xa2\x0d\x5e\xfe"
      "\x34\x54\xc1\x85\xb7\x8a\xf6\x83\x45\x41\x80\x39\xa3\xfb\xb2\x8b\x9b\xb5"
      "\x29\xd7\xbf\x7b\xd9\xe3\xc9\x7f\xa0\x4f\xd9\x5d\x03\xba\x4b\x1b\xef\xd3"
      "\x54\xd9\x02\x32\x93\x6a\x10\xc9\x6f\xfa\x5e\x11\xd0\x5d\x80\x48\xf7\xec"
      "\x72\xef\xdf\x7a\x4f\x2c\x5e\x12\x77\xf7\x23\x6f\x89\x84\xc3\xd1\x2d\xb1"
      "\xaf\x4c\x7f\x3a\x11\xf4\x23\xc5\x4b\xe0\xb9\x4e\xc8\xd4\xde\xd6\x48\x9c"
      "\x13\xe1\xb3\xa1\x09\x28\xe6\x10\xb6\x33\x74\x3a\x3a\x5b\xe7\x54\x6f\x02"
      "\x7e\x7c\x47\xce\xc1\x11\x58\x27\x76\xa2\x1b\xa2\xfb\x63\x57\xcb\xa5\x08"
      "\x80\x47\x0a\xd9\xa6\x68\x5a\x5e\xd3\x26\x7a\x26\x06\xc5\xb7\x1f\x75\x2f"
      "\x2b\x2d\xd1\x74\x14\x61\xa5\xe9\x16\x16\x21\x6b\x41\x9f\x6c\x28\x58\xb4"
      "\x1b\x4c\xa9\xb3\x8c\x07\x82\x15\xfa\x79\xb6\x17\x91\x71\xa5\x99\x5f\xc8"
      "\xe9\x9a\x2e\x68\xa0\xe6\x1d\xa1\x47\xfe\x12\x6a\xaa\x2f\xd7\x25\xa6\xc7"
      "\x74\x88\x96\xa3\xa8\x5d\x13\x1b\x32\x9b\x38\xc9\xc8\x56\xcd\x15\x32\xbc"
      "\xde\x94\xbd\x0f\xe0\x9d\x56\x05\x1d\xe9\xaa\x9a\x99\xca\xfd\x2f\xc1\x96"
      "\x8a\xf0\xfc\xcd\x5c\x7f\x96\xbe\x19\x0e\xb6\x54\x63\x09\x7f\x14\xd0\x66"
      "\x50\x37\x67\xc1\x59\xa8\x63\x36\xd6\xc3\x44\x5a\x9e\x02\x96\xab\xf5\x0d"
      "\x1d\x0b\x20\xb0\xcf\x01\x51\xc4\x63\xe7\xa8\x42\x66\x0a\x45\x4b\x13\x92"
      "\x2c\x5d\x24\x5b\x7c\x71\x0b\xe4",
      2060);
  syscall(__NR_write, /*fd=*/r[0], /*buf=*/0x200000001700ul, /*count=*/0x80cul);
}
int main(void)
{
  syscall(__NR_mmap, /*addr=*/0x1ffffffff000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul,
          /*fd=*/(intptr_t)-1, /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x200000000000ul, /*len=*/0x1000000ul,
          /*prot=PROT_WRITE|PROT_READ|PROT_EXEC*/ 7ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul,
          /*fd=*/(intptr_t)-1, /*offset=*/0ul);
  syscall(__NR_mmap, /*addr=*/0x200001000000ul, /*len=*/0x1000ul, /*prot=*/0ul,
          /*flags=MAP_FIXED|MAP_ANONYMOUS|MAP_PRIVATE*/ 0x32ul,
          /*fd=*/(intptr_t)-1, /*offset=*/0ul);
  const char* reason;
  (void)reason;
  for (procid = 0; procid < 8; procid++) {
    if (fork() == 0) {
      use_temporary_dir();
      loop();
    }
  }
  sleep(1000000);
  return 0;
}
